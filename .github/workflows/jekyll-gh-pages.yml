# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Auto-fix platform mismatch issues
      - name: Setup Ruby and Bundle
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false

      # Auto-correct platform issues
      - name: Fix Gemfile.lock platform compatibility
        run: |
          # Remove existing lockfile to regenerate with correct platform
          rm -f Gemfile.lock
          bundle install

          # Alternative approach: Add platforms to existing lockfile
          # bundle lock --add-platform x86_64-linux
          # bundle lock --add-platform ruby
          # bundle install

      - name: Setup Pages
        uses: actions/configure-pages@v5

      # Create EmailJS config in source so Jekyll includes it in the build (uses repo secrets)
      - name: Create EmailJS source config (CI only)
        env:
          EMAILJS_PUBLIC_KEY: ${{ secrets.EMAILJS_PUBLIC_KEY }}
          EMAILJS_SERVICE_ID: ${{ secrets.EMAILJS_SERVICE_ID }}
          EMAILJS_TEMPLATE_ID: ${{ secrets.EMAILJS_TEMPLATE_ID }}
        run: |
          mkdir -p js
          cat > js/emailjs-config.js <<'EOF'
          // Runtime EmailJS configuration generated by CI â€” do NOT commit secrets to repo.
          (function() {
            // Domain validation - only allow your website to send emails
            const allowedDomains = [
              'gauravsc-alc.github.io',
              'localhost',
              '127.0.0.1'
            ];

            const currentDomain = window.location.hostname;
            const isDomainAllowed = allowedDomains.some(domain =>
              currentDomain === domain || currentDomain.endsWith('.' + domain)
            );

            if (!isDomainAllowed) {
              console.warn('EmailJS: Domain not authorized for email sending');
              window.EMAILJS_CONFIG = {
                PUBLIC_KEY: '',
                SERVICE_ID: '',
                TEMPLATE_ID: ''
              };
              return;
            }

            // Set configuration only for authorized domains
            window.EMAILJS_CONFIG = {
              PUBLIC_KEY: '${EMAILJS_PUBLIC_KEY}',
              SERVICE_ID: '${EMAILJS_SERVICE_ID}',
              TEMPLATE_ID: '${EMAILJS_TEMPLATE_ID}'
            };

            console.log('EmailJS: Configuration loaded for authorized domain');
          })();
          EOF
          echo "Wrote js/emailjs-config.js in workspace (will be included by Jekyll build)"

      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
